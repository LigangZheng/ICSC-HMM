%% Example ellipsoids clean code
close all
clear all
figure('Color',[1 1 1]);
%Ellipsoid 1
Cov = ones(3,3) + eye(3)
mu = [0 0 0]';
behavs_theta{1,1} = Cov;
[V1,D1] = eig(Cov)
[x,y,z] = created3DgaussianEllipsoid(mu,V1,D1);
surfl(x,y,z);

%Ellipsoid 2: Scale+Noise
D1m = diag(D1)*2 + abs(randn(3,1).*[0.5 0.7 1]');
Covs2 = V1*(diag(D1m))*V1'
behavs_theta{1,2} = Covs2;
[V2,D2] = eig(Covs2)
mu = mu + [0 5 0]';
[x,y,z] = created3DgaussianEllipsoid(mu,V2,D2);
hold on;
surfl(x,y,z);

%Ellipsoid 3: Rotated Coordinates
angle = pi/2;
CoordRot = rotx(angle)*roty(angle*0.5)*rotx(angle*2);
V2_rot = CoordRot*V2;
Covs3 = V2_rot*D2*V2_rot'
behavs_theta{1,3} = Covs3;
[V3,D3] = eig(Covs3)
mu = mu + [0 5 0]';
[x,y,z] = created3DgaussianEllipsoid(mu,V3,D3);
hold on;
surfl(x,y,z);
colormap hot;
xlabel('x');ylabel('y');zlabel('z');
axis equal

%Ellipsoid 4: Rotated Coordinates + Scaled + Shape
angle = pi/2;
CoordRot = rotx(angle*0)*roty(angle*0.3)*rotx(angle*1);
V3_rot = CoordRot*V3;
D3m = (diag(D1) + abs(randn(3,1).*[0.5 0.7 1]'))*0.3;
Covs4 = V3_rot*diag(D3m)*V3_rot'
behavs_theta{1,4} = Covs4;
[V4,D4] = eig(Covs4)
mu = mu + [0 5 0]';
[x,y,z] = created3DgaussianEllipsoid(mu,V4,D4);
hold on;
surfl(x,y,z);

% Ellipsoid 5: Diff Shape
% D_2d = (ones(3,1)*2 + abs(randn(3,1))).*[0.5 100 100]';
% Cov5 = V4*(diag(D_2d))*V4';
% behavs_theta{1,5} = Cov5;
% [V5,D5] = eig(Cov5)
% mu = mu + [0 5 0]';
% [x,y,z] = created3DgaussianEllipsoid(mu,V5,D5);
% surfl(x,y,z);

colormap hot;
xlabel('x');ylabel('y');zlabel('z');
axis equal


% Shape Representation of Ellipsoids
figure('Color',[1 1 1])
[angles1 points1] = computeShapeRepresentation(D1,V1);
fill3(points1(1,:),points1(2,:),points1(3,:),'r')
hold on
[angles2 points2] = computeShapeRepresentation(D2,V2);
fill3(points2(1,:),points2(2,:),points2(3,:),'g')
hold on
[angles3 points3] = computeShapeRepresentation(D3,V3);
fill3(points3(1,:),points3(2,:),points3(3,:),'c')
hold on
[angles4 points4] = computeShapeRepresentation(D4,V4);
fill3(points4(1,:),points4(2,:),points4(3,:),'b')
% hold on
% [angles5 points5] = computeShapeRepresentation(D5,V5);
% fill3(points5(1,:),points5(2,:),points5(3,:),'b')


grid on
xlabel('x');ylabel('y');zlabel('z');
axis equal

angles=[];
angles{1,1}=cosd(angles1);
angles{1,2}=cosd(angles2);
angles{1,3}=cosd(angles3);
angles{1,4}=cosd(angles4);
% angles{1,5}=cosd(angles5);

%% Compare angles
corr_prob = [];
dmax = sqrt(prod(size(angles1)));
for i=1:length(angles)
    for j=1:length(angles)
        diff (i,j) = norm(sort(angles{i})-sort(angles{j}),'fro')/dmax;
        corr_prob(i,j) =  exp(-2*pi/dmax*norm(sort(angles{i})-sort(angles{j}),'fro'));
        % Gaussian proximity probability
%         corr_prob(i,j) = exp(-(1/(2*k))*diff(i,j));
      
    end
end

diff
corr_prob

figure('Color',[1 1 1])
imshow(diff, 'InitialMagnification',10000)  % # you want your cells to be larger than single pixels
title('Frobenius Difference of Eigenpolytope Angles')
colormap(hot) % # to change the default grayscale colormap
colorbar


%% Example ellipsoids
clear all
Cov = [1 0.5 0.3
       0.5 2 0
       0.3 0 3];
%%%%%%% Ellipsoids %%%%%%%
% Cov = eye(3);
Cov = ones(3,3) + eye(3)
mu = [0 0 0]';
behavs_theta{1,1} = Cov;
[V1,D1] = eig(Cov)
% X1 = D^1/2*V1'
% Y1 = computeAngleCosineMatrix(X1);
angles = computeShapeRepresentation(D1,V1);
eig1 = diag(D1)
% V = eye(size(D));
[x,y,z] = created3DgaussianEllipsoid(mu,V1,D1);
% [x,y,z] = created3DgaussianEllipsoid(mu,eye(size(V),D);
figure('Color',[1 1 1]);
% subplot(1,2,1)
surfl(x,y,z);
% colormap hot;
% xlabel('x');ylabel('y');zlabel('z');
% axis equal

% Cov Scaled*
% D_perm = diag(D_eig(randperm(3)))
D_2 = diag(D1)*2 + abs(randn(3,1).*[0.5 0.7 1]');
Covs2 = V1*(diag(D_2))*V1'
behavs_theta{1,2} = Covs2;
[V2,D2] = eig(Covs2)
X2 = D2^1/2*V2'
Y2 = computeAngleCosineMatrix(X2);
eig2 = diag(D2)
% V = eye(size(D));
[x,y,z] = created3DgaussianEllipsoid(mu+[0 5 0]',V2,D2);
% [x,y,z] = created3DgaussianEllipsoid(mu+[0 5 0]',eye(size(D)),D);
% subplot(1,2,2)
hold on;
surfl(x,y,z);


angle = pi/2;
CoordRot = rotx(angle)*roty(angle*0.5)*rotx(angle*2);
V2_rot = CoordRot*V2;
Covs2_rot = V2_rot*D2*V2_rot'
behavs_theta{1,2} = Covs2_rot;
[V2_rot,D2_rot] = eig(Covs2_rot)
X2_rot = D2_rot^1/2*V2_rot'
Y2_rot = computeAngleCosineMatrix(X2_rot);
eig2_rot = diag(D2_rot)
[x,y,z] = created3DgaussianEllipsoid(mu+[0 10 0]',V2_rot,D2_rot);
hold on;
surfl(x,y,z);

colormap hot;
xlabel('x');ylabel('y');zlabel('z');
axis equal

% V1 = eye(size(D));
% V2 = eye(size(D));
% V2_rot = eye(size(D));
[angles1, angles2] = pairEigenShape(eig1, V1, eig2, V2,'r')
angles1n = computeShapeRepresentation(D1,V1)
angles2n = computeShapeRepresentation(D2,V2)
[angles2, angles2_rot] = pairEigenShape(eig2, V2, eig2_rot, V2_rot,'g')
angles2n_rot = computeShapeRepresentation(D2_rot,V2_rot)
% 
% D_2d = (ones(3,1)*2 + abs(randn(3,1))).*[1 1 100]';
% Cov_s2d = V*(diag(D_2d))*V^-1;
% behavs_theta{1,3} = Cov_s2d;
% [V,D] = eig(Cov_s2d)
% [x,y,z] = created3DgaussianEllipsoid(mu+[0 10 0]',eye(size(D)),D);
% % subplot(1,2,2)
% hold on;
% surfl(x,y,z);
% 
% D_2dd = abs(diag(D)*0.25 - randn(3,1)*0.1);
% Cov_s2dd = V*(diag(D_2dd))*V^-1;
% behavs_theta{1,4} = Cov_s2dd;
% [V,D] = eig(Cov_s2dd)
% [x,y,z] = created3DgaussianEllipsoid(mu+[0 15 0]',eye(size(D)),D);
% % subplot(1,2,2)
% hold on;
% surfl(x,y,z);
% 
% D_2d = (ones(3,1)*2 + abs(randn(3,1))).*[5 0.001 5]';
% Cov_s2d = V*(diag(D_2d))*V^-1;
% behavs_theta{1,5} = Cov_s2d;
% [V,D] = eig(Cov_s2d)
% [x,y,z] = created3DgaussianEllipsoid(mu+[0 20 0]',eye(size(D)),D);
% % subplot(1,2,2)
% hold on;
% surfl(x,y,z);
% 
% D_2dd = abs(diag(D)*0.25 - randn(3,1)*0.01);
% Cov_s2dd = V*(diag(D_2dd))*V^-1;
% behavs_theta{1,6} = Cov_s2dd;
% [V,D] = eig(Cov_s2dd)
% [x,y,z] = created3DgaussianEllipsoid(mu+[0 26 0]',eye(size(D)),D);
% % subplot(1,2,2)
% hold on;
% surfl(x,y,z);

%% Planes
A = [1 1 0;0 0 1]; Ashift = [1 1 1];
B = [1 1 1]; C = [1 1 0]
figure('Color',[1 1 1])
plotPlanes(A,'d',Ashift,B,'Normal',C)
%%
pointA = [0,0,0];
pointB = [-10,-20,10];
pointC = [10,20,10];
points=[pointA' pointB' pointC']; % using the data given in the question
figure('Color',[1 1 1])
fill3(points(1,:),points(2,:),points(3,:),'r')
grid on
alpha(0.3)
